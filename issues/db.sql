DROP TABLE IF EXISTS attachment;
DROP TABLE IF EXISTS comment;
DROP TABLE IF EXISTS issue;
DROP TABLE IF EXISTS user;
DROP TABLE IF EXISTS votes;
DROP TABLE IF EXISTS preferences;

CREATE TABLE IF NOT EXISTS users (
  id          INTEGER PRIMARY KEY,
  name        UNIQUE NOT NULL,
  email,
  admin       BOOLEAN DEFAULT FALSE,
  password    NOT NULL,
  active      BOOLEAN DEFAULT TRUE, -- can only log in if active
  vote_weight REAL DEFAULT 1.0
);

CREATE TABLE IF NOT EXISTS preferences (
  id  INTEGER PRIMARY KEY,
  user NOT NULL,

  show_robot_comments BOOLEAN DEFAULT TRUE, -- robot comments automatically generated by internal actions - ie ticket closed
  email_on_updates BOOLEAN DEFAULT TRUE, -- get email when owned issues change, or comments replied to

  FOREIGN KEY (user) REFERENCES users (id)
);


CREATE TABLE IF NOT EXISTS issues (
  id             INTEGER PRIMARY KEY,
  reporter       NOT NULL,
  owner          NOT NULL,
  short_text,
  long_text,
  cc,             -- comma separated list of usernames - not yet used
  estimated_time INTEGER DEFAULT 0,
  severity       INTEGER DEFAULT 0,
  open           BOOLEAN DEFAULT TRUE,
  created_date   TIMESTAMP NOT NULL DEFAULT current_timestamp,
  last_edit_date TIMESTAMP NOT NULL DEFAULT current_timestamp,

  FOREIGN KEY (reporter) REFERENCES users (id),
  FOREIGN KEY (owner) REFERENCES users (id)
);

CREATE TABLE IF NOT EXISTS comments (
  id   INTEGER PRIMARY KEY,
  date TIMESTAMP DEFAULT current_timestamp,
  owner NOT NULL,
  issue NOT NULL,
  text,
  FOREIGN KEY (owner) REFERENCES users (id),
  FOREIGN KEY (issue) REFERENCES issues (id)
);

CREATE TABLE IF NOT EXISTS attachments (
  id   INTEGER PRIMARY KEY,
  blob,       -- contents if we decide to store inside db
  filename,   -- filename of blob if stored outside db (most likely)
  mimetype,   -- mimetype as specified by the client, ie "text/plain" 

  date TIMESTAMP DEFAULT current_timestamp,
  owner NOT NULL,
  comment,
  issue,

  FOREIGN KEY (comment) REFERENCES comments (id),
  FOREIGN KEY (issue) REFERENCES issues (id),
  FOREIGN KEY (owner) REFERENCES users (id),
  -- Force either comment OR issue to be used, but only one of them
  CHECK (comment IS NULL OR issue IS NULL),
  CHECK (comment IS NOT NULL OR issue IS NOT NULL)
);


CREATE TABLE IF NOT EXISTS votes (
  id    INTEGER PRIMARY KEY,
  owner INTEGER NOT NULL,
  issue INTEGER NOT NULL,
  FOREIGN KEY (owner) REFERENCES users (id),
  FOREIGN KEY (issue) REFERENCES issues (id)
);

